// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using ApiWykazuPodatnikowVatData.EF.Models;

namespace ApiWykazuPodatnikowVatData.EF.Data
{
    public partial class Doradob2bContext : DbContext
    {
        public virtual DbSet<ApiWykazuPodatnikowVatDataEntity> ApiWykazuPodatnikowVatDataEntity { get; set; }
        public virtual DbSet<ApiWykazuPodatnikowVatDataEntityAccountNumber> ApiWykazuPodatnikowVatDataEntityAccountNumber { get; set; }
        public virtual DbSet<ApiWykazuPodatnikowVatDataEntityPerson> ApiWykazuPodatnikowVatDataEntityPerson { get; set; }
        public virtual DbSet<ApiWykazuPodatnikowVatDataEntityPesel> ApiWykazuPodatnikowVatDataEntityPesel { get; set; }

        public Doradob2bContext(DbContextOptions<Doradob2bContext> options) : base(options)
        {
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer("Data Source=ISK-PP\\SQLEXPRESS;Initial Catalog=IUIntegrationSystemData;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ApiWykazuPodatnikowVatDataEntity>(entity =>
            {
                entity.HasIndex(e => e.ApiWykazuPodatnikowVatDataEntityPeselId);

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Krs).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.Nip).IsUnicode(false);

                entity.Property(e => e.RegistrationDenialBasis).IsUnicode(false);

                entity.Property(e => e.Regon).IsUnicode(false);

                entity.Property(e => e.RemovalBasis).IsUnicode(false);

                entity.Property(e => e.ResidenceAddress).IsUnicode(false);

                entity.Property(e => e.RestorationBasis).IsUnicode(false);

                entity.Property(e => e.StatusVat).IsUnicode(false);

                entity.Property(e => e.WorkingAddress).IsUnicode(false);
            });

            modelBuilder.Entity<ApiWykazuPodatnikowVatDataEntityAccountNumber>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.AccountNumber).IsUnicode(false);

                entity.HasOne(d => d.ApiWykazuPodatnikowVatDataEntity)
                    .WithMany(p => p.ApiWykazuPodatnikowVatDataEntityAccountNumber)
                    .HasForeignKey(d => d.ApiWykazuPodatnikowVatDataEntityId)
                    .HasConstraintName("FK_1");
            });

            modelBuilder.Entity<ApiWykazuPodatnikowVatDataEntityPerson>(entity =>
            {
                entity.HasIndex(e => e.ApiWykazuPodatnikowVatDataEntityAuthorizedClerksId);

                entity.HasIndex(e => e.ApiWykazuPodatnikowVatDataEntityPartnersId);

                entity.HasIndex(e => e.ApiWykazuPodatnikowVatDataEntityPeselId);

                entity.HasIndex(e => e.ApiWykazuPodatnikowVatDataEntityRepresentativesId);

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.CompanyName).IsUnicode(false);

                entity.Property(e => e.FirstName).IsUnicode(false);

                entity.Property(e => e.LastName).IsUnicode(false);

                entity.Property(e => e.Nip).IsUnicode(false);
            });

            modelBuilder.Entity<ApiWykazuPodatnikowVatDataEntityPesel>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Pesel).IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}